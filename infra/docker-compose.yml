version: '3.9'

services:

  postgres_database:
    container_name: foodgram-db
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    restart: always
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    container_name: foodgram-back
    build: 
      context: ../backend
      dockerfile: Dockerfile
    restart: always
    depends_on:
      postgres_database:
        condition: service_healthy
    env_file:
      - ./.env
    volumes:
      - static_value:/app/static/
      - media_value:/app/media/
      - ../data/:/app/data/
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py fill_database_with_default_ingredients --path=/app/data/ingredients.csv &&
             echo 'from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser(\"admin\", \"admin@example.com\", \"admin\") if not User.objects.filter(username=\"admin\").exists() else None;' | python manage.py shell &&
             gunicorn foodgram.wsgi:application --bind 0.0.0.0:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  frontend:
    container_name: foodgram-front
    build:
      context: ../frontend
      dockerfile: Dockerfile
    volumes:
      - ../frontend/:/app/result_build/

  nginx:
    container_name: foodgram-proxy
    image: nginx:1.25.4-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ../frontend/build:/usr/share/nginx/html/
      - ../docs/:/usr/share/nginx/html/api/docs/
      - static_value:/var/html/backend_static/
      - media_value:/var/html/media/
    depends_on:
      - frontend
      - backend
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 10s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
  static_value:
  media_value:
